import logging
import io
import matplotlib
from telegram import Update
from telegram.ext import CallbackContext
from src.handlers import ask_question_handler
from src.keyboards import stats_keyboard
from src.session_manager import send_message_with_tracking
from src import db

matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –¥–∏—Å–ø–ª–µ—è
import matplotlib.pyplot as plt

logger = logging.getLogger(__name__)


def get_user_statistics(user_id: int) -> dict:
    stats = {}
    try:
        db.cur.execute("SELECT COUNT(*) FROM user_progress WHERE user_id = %s", (user_id,))
        stats['learned_words'] = db.cur.fetchone()[0]

        db.cur.execute("SELECT COUNT(*) FROM user_words WHERE user_id = %s", (user_id,))
        stats['added_words'] = db.cur.fetchone()[0]

        db.cur.execute("SELECT session_date, learned_words FROM session_stats WHERE user_id = %s", (user_id,))
        stats['session_stats'] = db.cur.fetchall()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    return stats


def generate_stats_chart(session_stats):
    dates = [s[0].strftime("%Y-%m-%d %H:%M") for s in session_stats]
    words = [s[1] for s in session_stats]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, words, marker='o', linestyle='-', color='blue')
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–µ—Å—Å–∏—è–º")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤")
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf


def stats_handler(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ—ë
    –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)

    user_id = update.effective_user.id
    stats = get_user_statistics(user_id)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: **{stats.get('learned_words', 0)}**\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: **{stats.get('added_words', 0)}**\n"
    )

    session_stats = stats.get('session_stats', [])
    if session_stats:
        text += "\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:**\n"
        for session in session_stats:
            date_str = session[0].strftime("%Y-%m-%d %H:%M") if hasattr(session[0], "strftime") else str(session[0])
            text += f"‚Ä¢ {date_str}: {session[1]} —Å–ª–æ–≤\n"
    else:
        text += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    send_message_with_tracking(
        update, context,
        text=text,
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    send_message_with_tracking(
        update, context,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=stats_keyboard()
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_buf = generate_stats_chart(session_stats)
    if chart_buf:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        message = update.message.reply_photo(photo=chart_buf)
        if 'bot_messages' not in context.user_data:
            context.user_data['bot_messages'] = []
        context.user_data['bot_messages'].append(message.message_id)
    else:
        send_message_with_tracking(
            update, context,
            text="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )


def clear_user_sessions(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id

    try:
        db.cur.execute("DELETE FROM session_stats WHERE user_id = %s", (user_id,))
        db.conn.commit()
        send_message_with_tracking(update, context, text="üóë –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", reply_markup=stats_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        send_message_with_tracking(update, context, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=stats_keyboard())


def reset_progress_handler(update: Update, context: CallbackContext):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.callback_query or not update.callback_query.message:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    user_id = update.effective_user.id
    try:
        with db.conn:
            db.cur.execute("DELETE FROM user_progress WHERE user_id = %s", (user_id,))
        update.callback_query.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!")
        ask_question_handler(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
        update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")