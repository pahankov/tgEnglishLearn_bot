import logging
import io
import matplotlib

matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –¥–∏—Å–ø–ª–µ—è
import matplotlib.pyplot as plt

from telegram import Update
from telegram.ext import CallbackContext
from src.database import Database

logger = logging.getLogger(__name__)
db = Database()


def get_user_statistics(user_id: int) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
      - learned_words: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_progress);
      - added_words: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_words);
      - session_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã session_stats), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (session_date, learned_words).

    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π.
    """
    stats = {}
    try:
        db.cur.execute("SELECT COUNT(*) FROM user_progress WHERE user_id = %s", (user_id,))
        stats['learned_words'] = db.cur.fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è user_id {user_id}: {e}")
        stats['learned_words'] = 0

    try:
        db.cur.execute("SELECT COUNT(*) FROM user_words WHERE user_id = %s", (user_id,))
        stats['added_words'] = db.cur.fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è user_id {user_id}: {e}")
        stats['added_words'] = 0

    try:
        # –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã session_stats —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏.
        db.cur.execute(
            "SELECT session_date, learned_words FROM session_stats WHERE user_id = %s ORDER BY session_date",
            (user_id,)
        )
        stats['session_stats'] = db.cur.fetchall()  # –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (session_date, learned_words)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –¥–ª—è user_id {user_id}: {e}")
        stats['session_stats'] = []

    return stats


# stats.py
def generate_stats_chart(session_stats):
    dates = [s[0].strftime("%Y-%m-%d %H:%M") for s in session_stats]
    words = [s[1] for s in session_stats]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, words, marker='o', linestyle='-', color='blue')
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–µ—Å—Å–∏—è–º")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤")
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf


def stats_handler(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ—ë
    –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω).
    """
    user_id = update.effective_user.id
    stats = get_user_statistics(user_id)

    text = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"–ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: **{stats.get('learned_words', 0)}**\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: **{stats.get('added_words', 0)}**\n"
    )

    session_stats = stats.get('session_stats', [])
    if session_stats:
        text += "\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:**\n"
        for session in session_stats:
            # –ï—Å–ª–∏ session_date ‚Äî –æ–±—ä–µ–∫—Ç datetime, –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ strftime.
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.
            date_str = session[0].strftime("%Y-%m-%d %H:%M") if hasattr(session[0], "strftime") else str(session[0])
            text += f"‚Ä¢ {date_str}: {session[1]} —Å–ª–æ–≤\n"
    else:
        text += "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"

    update.message.reply_text(text, parse_mode="Markdown")

    chart_buf = generate_stats_chart(session_stats)
    if chart_buf:
        update.message.reply_photo(photo=chart_buf)
    else:
        update.message.reply_text("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
