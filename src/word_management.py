from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.keyboards import main_menu_keyboard, add_more_keyboard
from src.yandex_api import YandexDictionaryApi
import os
import logging
import re

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ API
db = Database()
api_key = os.getenv("YANDEX_DICTIONARY_API_KEY")
yandex_api = YandexDictionaryApi(api_key=api_key) if api_key else None

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
WAITING_WORD, WAITING_DELETE, WAITING_CHOICE = range(3)


def pluralize_words(count: int) -> str:
    """–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '—Å–ª–æ–≤–æ'"""
    if count % 10 == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—Å–ª–æ–≤–∞"
    return "—Å–ª–æ–≤"


def add_word(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_WORD


def save_word(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞"""
    user_id = update.effective_user.id
    input_text = update.message.text.strip().lower()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if len(input_text.split()) > 1:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–ª–æ–≤–æ!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    if not re.match(r'^[–∞-—è—ë\-]+$', input_text):
        update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ
    if db.check_duplicate(user_id, input_text):
        update.message.reply_text(
            f"‚ùå –°–ª–æ–≤–æ '{input_text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    try:
        api_response = yandex_api.lookup(input_text, "ru-en")
        if not api_response or not api_response.get('def'):
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API")

        first_translation = api_response['def'][0]['tr'][0]['text'].lower()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    if db.check_duplicate(user_id, first_translation):
        update.message.reply_text(
            f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ '{first_translation}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
    if db.add_user_word(user_id, first_translation, input_text):
        count = db.count_user_words(user_id)
        update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {input_text} ‚Üí {first_translation}\n"
            f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {count}",
            reply_markup=add_more_keyboard()
        )
        return WAITING_CHOICE
    else:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END


def handle_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    choice = update.message.text
    if choice == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë ‚ûï":
        update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD
    elif choice == "–í –º–µ–Ω—é ‚Ü©Ô∏è":
        update.message.reply_text(
            "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_CHOICE


def delete_word(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    update.message.reply_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_DELETE


def confirm_delete(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    if db.delete_user_word(user_id, word):
        update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text(
            f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END


def show_user_words(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤"""
    user_id = update.effective_user.id
    try:
        words = db.get_user_words(user_id)
        if not words:
            update.message.reply_text(
                "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç!",
                reply_markup=main_menu_keyboard()
            )
            return

        formatted = [f"‚Ä¢ {en.capitalize()} ‚Üí {ru.capitalize()}" for en, ru in words]
        count = len(words)
        update.message.reply_text(
            f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {pluralize_words(count)}):\n" + "\n".join(formatted),
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤: {str(e)}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤!",
            reply_markup=main_menu_keyboard()
        )
