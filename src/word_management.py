from psycopg2 import IntegrityError
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.keyboards import main_menu_keyboard
from src.yandex_api import YandexDictionaryApi
from dotenv import load_dotenv
import os
import logging
import re

logger = logging.getLogger(__name__)

load_dotenv()
db = Database()
api_key = os.getenv("YANDEX_DICTIONARY_API_KEY")
if not api_key:
    raise ValueError("–¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env.")
yandex_api = YandexDictionaryApi(api_key=api_key)

WAITING_WORD, WAITING_DELETE = range(2)


def pluralize_words(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—Å–ª–æ–≤–∞"
    else:
        return "—Å–ª–æ–≤"


def add_word(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_WORD

def save_word(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    input_text = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    if len(input_text.split()) > 1:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–ª–æ–≤–æ.",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    if not re.match(r'^[–∞-—è—ë\-]+$', input_text):
        update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å.",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    try:
        api_response = yandex_api.lookup(input_text, "ru-en")
        if not api_response or not api_response.get('def'):
            update.message.reply_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard())
            return WAITING_WORD

        first_translation = api_response['def'][0]['tr'][0]['text'].lower()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=main_menu_keyboard())
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö
    if db.check_duplicate(user_id, first_translation, input_text):
        update.message.reply_text(
            f"‚ùå –°–ª–æ–≤–æ '{input_text}' –∏–ª–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ!",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    if db.add_user_word(user_id, first_translation, input_text):
        count = db.count_user_words(user_id)
        update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–æ '{input_text}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–í—Å–µ–≥–æ –≤–∞—à–∏—Ö —Å–ª–æ–≤: {count}",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )

    return ConversationHandler.END

def delete_word(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_DELETE


def confirm_delete(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    if db.delete_user_word(user_id, word):
        update.message.reply_text(
            f"üóëÔ∏è –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text(
            f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END


def show_user_words(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        words = db.get_user_words(user_id)
        if not words:
            update.message.reply_text(
                "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç.",
                reply_markup=main_menu_keyboard()
            )
            return

        formatted = [f"‚Ä¢ {en.capitalize()} ‚Äî {ru.capitalize()}" for en, ru in words]
        count = len(words)
        word_form = pluralize_words(count)
        text = f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {word_form}):\n" + "\n".join(formatted)
        update.message.reply_text(text, reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤: {e}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤.",
            reply_markup=main_menu_keyboard()
        )
