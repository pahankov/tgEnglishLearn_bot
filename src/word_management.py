from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.keyboards import main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
import logging

db = Database()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_WORD, WAITING_DELETE = range(2)

def pluralize_words(count: int) -> str:
    if count % 10 == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—Å–ª–æ–≤–∞"
    else:
        return "—Å–ª–æ–≤"

def add_word(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ-–†—É—Å—Å–∫–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ)"
    )
    return WAITING_WORD

def save_word(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip().split('-')

    if len(text) != 2:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    en_word, ru_word = text[0].strip(), text[1].strip()
    success = db.add_user_word(user_id, en_word, ru_word)

    if success:
        count = db.count_user_words(user_id)
        word_form = pluralize_words(count)
        update.message.reply_text(
            f"‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {count} {word_form}.",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text(
            "‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

def delete_word(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_DELETE

def confirm_delete(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    en_word = update.message.text.strip()
    success = db.delete_user_word(user_id, en_word)

    if success:
        update.message.reply_text(
            f"üóëÔ∏è –°–ª–æ–≤–æ '{en_word}' —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
    else:
        update.message.reply_text(
            "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END

def show_user_words(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)

    if not words:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö —Å–ª–æ–≤.",
            reply_markup=main_menu_keyboard()
        )
    else:
        formatted_words = []
        for en, ru in words:
            formatted_en = en.capitalize()
            formatted_ru = ru.capitalize()
            formatted_words.append(f"‚Ä¢ {formatted_en} ‚Äî {formatted_ru}")

        count = len(words)
        word_form = pluralize_words(count)
        text = f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {word_form}):\n" + "\n".join(formatted_words)
        update.message.reply_text(text, reply_markup=main_menu_keyboard())
