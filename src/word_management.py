from psycopg2 import IntegrityError
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.keyboards import main_menu_keyboard
from src.yandex_api import YandexDictionaryApi
from dotenv import load_dotenv
import os
import logging

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
db = Database()
api_key = os.getenv("YANDEX_DICTIONARY_API_KEY")
if not api_key:
    raise ValueError("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
yandex_api = YandexDictionaryApi(api_key=api_key)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_WORD, WAITING_DELETE = range(2)


def pluralize_words(count: int) -> str:
    """
    –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "—Å–ª–æ–≤–æ" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
    """
    if count % 10 == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—Å–ª–æ–≤–∞"
    else:
        return "—Å–ª–æ–≤"


def add_word(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_WORD


def save_word(update: Update, context: CallbackContext) -> int:
    logger.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ save_word()")
    user_id = update.effective_user.id
    ru_word = update.message.text.strip().lower()

    if not ru_word.isalpha():
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
        return WAITING_WORD

    try:
        en_translation = yandex_api.lookup(ru_word, "ru-en")
        if not en_translation:
            update.message.reply_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return WAITING_WORD
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return WAITING_WORD

    en_translation_clean = en_translation.strip().lower()

    try:
        success = db.add_user_word(user_id, en_translation_clean, ru_word)
        if not success:
            update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{en_translation_clean}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return ConversationHandler.END

        count = db.count_user_words(user_id)
        update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {ru_word} ‚Üí {en_translation_clean}\n"
            f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {count}",
            reply_markup=main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"Database error: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    return ConversationHandler.END


def delete_word(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ).
    """
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_DELETE


def confirm_delete(update: Update, context: CallbackContext) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ).
    """
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    try:
        query = """
            DELETE FROM user_words
            WHERE user_id = %s AND (russian_translation = %s OR english_word = %s)
        """
        db.cur.execute(query, (user_id, word, word))
        if db.cur.rowcount > 0:
            db.conn.commit()
            update.message.reply_text(
                f"üóëÔ∏è –°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
                reply_markup=main_menu_keyboard()
            )
        else:
            update.message.reply_text(
                f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=main_menu_keyboard()
            )
    except Exception as e:
        db.conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}': {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END


def show_user_words(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    user_id = update.effective_user.id
    try:
        words = db.get_user_words(user_id)
        if not words:
            update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö —Å–ª–æ–≤.",
                reply_markup=main_menu_keyboard()
            )
        else:
            formatted_words = [
                f"‚Ä¢ {en.capitalize()} ‚Äî {ru.capitalize()}" for en, ru in words
            ]
            count = len(words)
            word_form = pluralize_words(count)
            text = f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {word_form}):\n" + "\n".join(formatted_words)
            update.message.reply_text(text, reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
