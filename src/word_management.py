from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.keyboards import main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from src.yandex_api import YandexDictionaryApi  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API-–∫–ª–∏–µ–Ω—Ç
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
db = Database()
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Yandex API
api_key = os.getenv("YANDEX_DICTIONARY_API_KEY")
if not api_key:
    raise ValueError("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
yandex_api = YandexDictionaryApi(api_key=api_key)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
WAITING_WORD, WAITING_DELETE = range(2)


def pluralize_words(count: int) -> str:
    """
    –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ "—Å–ª–æ–≤–æ" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞.
    """
    if count % 10 == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= count % 10 <= 4 and (count % 100 < 10 or count % 100 >= 20):
        return "—Å–ª–æ–≤–∞"
    else:
        return "—Å–ª–æ–≤"


def add_word(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–æ–µ).
    """
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞–ø—Ä–∏–º–µ—Ä: —è–±–ª–æ–∫–æ",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_WORD


def save_word(update: Update, context: CallbackContext) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API.
    """
    user_id = update.effective_user.id
    ru_word = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º
    if not ru_word.isalpha():
        update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
        en_translation = yandex_api.lookup(ru_word, "ru-en")
        if not en_translation:
            update.message.reply_text(
                f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{ru_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.",
                reply_markup=main_menu_keyboard()
            )
            return WAITING_WORD

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{ru_word}': '{en_translation}'.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ø–Ω–¥–µ–∫—Å.–°–ª–æ–≤–∞—Ä—é –¥–ª—è '{ru_word}': {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
        return WAITING_WORD

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        success = db.add_user_word(user_id, en_translation, ru_word)
        if success:
            count = db.count_user_words(user_id)
            word_form = pluralize_words(count)
            update.message.reply_text(
                f"‚úÖ –°–ª–æ–≤–æ '{ru_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{en_translation}'.\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {count} {word_form} –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ.",
                reply_markup=main_menu_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å–ª–æ–≤–æ '{ru_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{en_translation}'.")
        else:
            update.message.reply_text(
                f"‚ùå –°–ª–æ–≤–æ '{ru_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{en_translation}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=main_menu_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ: '{ru_word}' ({en_translation}).")
    except Exception as e:
        db.conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{ru_word}': {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
    return WAITING_WORD


def delete_word(update: Update, context: CallbackContext) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ).
    """
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):",
        reply_markup=main_menu_keyboard()
    )
    return WAITING_DELETE


def confirm_delete(update: Update, context: CallbackContext) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ).
    """
    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    try:
        query = """
            DELETE FROM user_words
            WHERE user_id = %s AND (russian_translation = %s OR english_word = %s)
        """
        db.cur.execute(query, (user_id, word, word))
        if db.cur.rowcount > 0:
            db.conn.commit()
            update.message.reply_text(
                f"üóëÔ∏è –°–ª–æ–≤–æ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
                reply_markup=main_menu_keyboard()
            )
        else:
            update.message.reply_text(
                f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=main_menu_keyboard()
            )
    except Exception as e:
        db.conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}': {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
    return ConversationHandler.END


def show_user_words(update: Update, context: CallbackContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    user_id = update.effective_user.id
    try:
        words = db.get_user_words(user_id)
        if not words:
            update.message.reply_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö —Å–ª–æ–≤.",
                reply_markup=main_menu_keyboard()
            )
        else:
            formatted_words = [
                f"‚Ä¢ {en.capitalize()} ‚Äî {ru.capitalize()}" for en, ru in words
            ]

            count = len(words)
            word_form = pluralize_words(count)
            text = f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {word_form}):\n" + "\n".join(formatted_words)
            update.message.reply_text(text, reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_keyboard()
        )
