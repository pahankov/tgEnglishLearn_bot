from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from src import db
from src.keyboards import main_menu_keyboard, add_more_keyboard, delete_more_keyboard
from src.session_manager import delete_bot_messages, send_message_with_tracking
from src.yandex_api import YandexDictionaryApi
import os
import logging
import re

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ==================
logger = logging.getLogger(__name__)

# ================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ==================
api_key = os.getenv("YANDEX_DICTIONARY_API_KEY")
yandex_api = YandexDictionaryApi(api_key=api_key) if api_key else None

# ================== –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ==================
WAITING_WORD, WAITING_DELETE = range(2)

# ================== –£—Ç–∏–ª–∏—Ç—ã ==================
def pluralize_words(count: int) -> str:
    """–°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '—Å–ª–æ–≤–æ' –ø–æ —á–∏—Å–ª–∞–º"""
    last_digit = count % 10
    if last_digit == 1 and count % 100 != 11:
        return "—Å–ª–æ–≤–æ"
    elif 2 <= last_digit <= 4 and not 11 <= count % 100 <= 19:
        return "—Å–ª–æ–≤–∞"
    return "—Å–ª–æ–≤"

# ================== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ ==================
def add_word(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    delete_bot_messages(update, context)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_message_with_tracking(
        update, context,
        text="üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
        reply_markup=add_more_keyboard()
    )
    return WAITING_WORD

def save_word(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    user_id = update.effective_user.id
    input_text = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"
    if input_text == "–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è":
        return handle_back_to_menu(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
    if not input_text:
        send_message_with_tracking(
            update, context,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    if len(input_text.split()) > 1:
        send_message_with_tracking(
            update, context,
            text="‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Å–ª–æ–≤–æ!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
    if not re.match(r'^[–∞-—è—ë\-]+$', input_text):
        send_message_with_tracking(
            update, context,
            text="‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if db.check_duplicate(user_id, input_text):
        send_message_with_tracking(
            update, context,
            text=f"‚ùå –°–ª–æ–≤–æ '{input_text.capitalize()}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API
    try:
        api_response = yandex_api.lookup(input_text, "ru-en")
        if not api_response or not api_response.get('def'):
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API")

        first_translation = api_response['def'][0]['tr'][0]['text'].lower()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        send_message_with_tracking(
            update, context,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
    if db.check_duplicate(user_id, first_translation):
        send_message_with_tracking(
            update, context,
            text=f"‚ùå –ü–µ—Ä–µ–≤–æ–¥ '{first_translation.capitalize()}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=add_more_keyboard()
        )
        return WAITING_WORD

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if db.add_user_word(user_id, first_translation, input_text):
        count = db.count_user_words(user_id)
        send_message_with_tracking(
            update, context,
            text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {input_text.capitalize()} –ø–æ —Å–ª–æ–≤—É {first_translation.capitalize()}\n"
                 f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {count}",
            reply_markup=add_more_keyboard()
        )
    else:
        send_message_with_tracking(
            update, context,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

    return WAITING_WORD

# ================== –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤ ==================
def delete_word(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    delete_bot_messages(update, context)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_message_with_tracking(
        update, context,
        text="üóë –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ):",
        reply_markup=delete_more_keyboard()
    )
    return WAITING_DELETE

def confirm_delete(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    user_id = update.effective_user.id
    word = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"
    if word == "–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è":
        return handle_back_to_menu(update, context)

    # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if db.delete_user_word(user_id, word):
        send_message_with_tracking(
            update, context,
            text=f"‚úÖ –°–ª–æ–≤–æ/–ø–µ—Ä–µ–≤–æ–¥ '{word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            reply_markup=delete_more_keyboard()
        )
    else:
        send_message_with_tracking(
            update, context,
            text=f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!",
            reply_markup=delete_more_keyboard()
        )

    return WAITING_DELETE

# ================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ==================
def handle_back_to_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å –ø–æ–ª–Ω—ã–º —Å–±—Ä–æ—Å–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    delete_bot_messages(update, context)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_message_with_tracking(
        update, context,
        text="üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

# ================== –ü–æ–∫–∞–∑ —Å–ª–æ–≤ ==================
def show_user_words(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if 'user_messages' not in context.user_data:
        context.user_data['user_messages'] = []
    context.user_data['user_messages'].append(update.message.message_id)
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {update.message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    user_id = update.effective_user.id
    try:
        words = db.get_user_words(user_id)
        if not words:
            send_message_with_tracking(
                update, context,
                text="üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç!",
                reply_markup=main_menu_keyboard()
            )
            return

        formatted = [f"‚Ä¢ {en.capitalize()} - {ru.capitalize()}" for en, ru in words]
        count = len(words)
        send_message_with_tracking(
            update, context,
            text=f"üìñ –í–∞—à–∏ —Å–ª–æ–≤–∞ ({count} {pluralize_words(count)}):\n" + "\n".join(formatted),
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–æ–≤: {str(e)}")
        send_message_with_tracking(
            update, context,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤!",
            reply_markup=main_menu_keyboard()
        )
