from datetime import datetime, timedelta
import telegram
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from src import db
import logging
from src.keyboards import main_menu_keyboard, MENU_BUTTON

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏
SESSION_TIMEOUT = 900  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


def save_session_data(user_id, context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    session_start = context.user_data.get("session_start")
    if not session_start:
        logger.error("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    session_end = datetime.now()
    duration = int((session_end - session_start).total_seconds())

    try:
        learned_words = db.count_new_learned_words(
            user_id=user_id,
            session_start=session_start,
            session_end=session_end + timedelta(seconds=1),
        )
        db.update_session_stats(
            user_id=user_id,
            learned_words=learned_words,
            session_duration=duration,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")


def check_session_timeout(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É."""
    job = context.job
    if not job or "user_id" not in job.context or "session_start" not in job.context:
        logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
        return

    user_id = job.context["user_id"]
    session_start = datetime.fromtimestamp(job.context["session_start"])
    session_end = datetime.now()
    duration = int((session_end - session_start).total_seconds())

    try:
        learned_words = db.count_new_learned_words(
            user_id=user_id,
            session_start=session_start,
            session_end=session_end,
        )
        db.update_session_stats(
            user_id=user_id,
            learned_words=learned_words,
            session_duration=duration,
        )
        context.bot.send_message(
            chat_id=user_id,
            text="‚è≥ –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            reply_markup=main_menu_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")


def end_session(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é."""
    if "user_messages" not in context.user_data:
        context.user_data["user_messages"] = []
    context.user_data["user_messages"].append(update.message.message_id)

    user_id = update.effective_user.id

    if "active_session" in context.user_data:
        save_session_data(user_id, context)
        context.user_data.clear()

    send_message_with_tracking(
        update, context,
        text="‚è≥ –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...",
        reply_markup=ReplyKeyboardRemove(),
    )
    send_message_with_tracking(
        update, context,
        text="–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard(),
    )


def start_session(update: Update, context: CallbackContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    if "user_messages" not in context.user_data:
        context.user_data["user_messages"] = []
    context.user_data["user_messages"].append(update.message.message_id)

    delete_bot_messages(update, context)

    user_id = update.effective_user.id
    session_start = datetime.now()
    context.user_data.update({
        "session_start": session_start,
        "correct_answers": 0,
        "active_session": True,
        "job": None,
    })
    job = context.job_queue.run_once(
        callback=check_session_timeout,
        when=SESSION_TIMEOUT,
        context={
            "user_id": user_id,
            "session_start": session_start.timestamp(),
        },
        name=str(user_id),
    )
    context.user_data["job"] = job

    send_message_with_tracking(
        update, context,
        text="–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!",
        reply_markup=ReplyKeyboardMarkup([[MENU_BUTTON]], resize_keyboard=True),
    )

    button = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞ üîä", callback_data="pronounce_word")]
    ])
    message = context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∑–¥–µ—Å—å:",
        reply_markup=button,
    )

    if "bot_messages" not in context.user_data:
        context.user_data["bot_messages"] = []
    context.user_data["bot_messages"].append(message.message_id)


def update_session_timer(context: CallbackContext, user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Å—Å–∏–∏."""
    if "job" in context.user_data:
        try:
            context.user_data["job"].schedule_removal()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

    new_job = context.job_queue.run_once(
        callback=check_session_timeout,
        when=SESSION_TIMEOUT,
        context={
            "user_id": user_id,
            "session_start": context.user_data["session_start"].timestamp(),
        },
        name=str(user_id),
    )
    context.user_data["job"] = new_job


def delete_bot_messages(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤ user_data."""
    chat_id = update.effective_chat.id

    if "bot_messages" in context.user_data:
        for message_id in context.user_data["bot_messages"]:
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except telegram.error.BadRequest as e:
                if "Message to delete not found" not in str(e):
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ {message_id}: {e}")
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ {message_id}: {e}")

        context.user_data["bot_messages"] = []

    if "user_messages" in context.user_data:
        for message_id in context.user_data["user_messages"]:
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except telegram.error.BadRequest as e:
                if "Message to delete not found" not in str(e):
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}: {e}")
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}: {e}")

        context.user_data["user_messages"] = []


def send_message_with_tracking(update: Update, context: CallbackContext, text: str, reply_markup=None, parse_mode=None, is_user_message=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ ID."""
    if is_user_message:
        message_id = update.message.message_id
    else:
        if update.message:
            message = update.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
            )
        elif update.callback_query and update.callback_query.message:
            message = update.callback_query.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
            )
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        message_id = message.message_id

    if "bot_messages" not in context.user_data:
        context.user_data["bot_messages"] = []
    context.user_data["bot_messages"].append(message_id)


def handle_menu_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–í –º–µ–Ω—é ‚Ü©Ô∏è'."""
    if "user_messages" not in context.user_data:
        context.user_data["user_messages"] = []
    context.user_data["user_messages"].append(update.message.message_id)

    user_id = update.effective_user.id

    if "active_session" in context.user_data:
        save_session_data(user_id, context)
        context.user_data.clear()

    delete_bot_messages(update, context)

    send_message_with_tracking(
        update, context,
        text="üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(),
    )

    return ConversationHandler.END
