from datetime import datetime, timedelta
import telegram
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from src import db
import logging
from src.keyboards import main_menu_keyboard, send_pronounce_button, MENU_BUTTON

logger = logging.getLogger(__name__)


def save_session_data(user_id, context):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"‚úÖ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    session_start = context.user_data.get('session_start')
    if not session_start:
        logger.error("‚ùå –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return

    session_end = datetime.now()
    duration = int((session_end - session_start).total_seconds())
    logger.info(f"‚è± –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: start={session_start}, end={session_end}, duration={duration} —Å–µ–∫.")

    try:
        # –ü–æ–¥—Å—á–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        learned_words = db.count_new_learned_words(
            user_id=user_id,
            session_start=session_start,
            session_end=session_end + timedelta(seconds=1)
        )
        logger.info(f"üìö –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {learned_words}.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        db.update_session_stats(
            user_id=user_id,
            learned_words=learned_words,
            session_duration=duration
        )
        logger.info(
            f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, —Å–ª–æ–≤–∞={learned_words}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={duration} —Å–µ–∫.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {e}")


def check_session_timeout(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É."""
    job = context.job
    logger.info("‚úÖ –í—ã–∑–æ–≤ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏.")

    if not job or 'user_id' not in job.context or 'session_start' not in job.context:
        logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É.")
        return

    user_id = job.context['user_id']
    session_start = datetime.fromtimestamp(job.context['session_start'])
    session_end = datetime.now()
    duration = int((session_end - session_start).total_seconds())
    logger.info(
        f"‚è± –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: user_id={user_id}, start={session_start}, end={session_end}, duration={duration} —Å–µ–∫.")

    try:
        # –ü–æ–¥—Å—á–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        learned_words = db.count_new_learned_words(
            user_id=user_id,
            session_start=session_start,
            session_end=session_end
        )
        logger.info(f"üìö –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {learned_words}.")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏–∏
        db.update_session_stats(
            user_id=user_id,
            learned_words=learned_words,
            session_duration=duration
        )
        logger.info(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É: user_id={user_id}, —Å–ª–æ–≤–∞={learned_words}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={duration} —Å–µ–∫.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.bot.send_message(
            chat_id=user_id,
            text="‚è≥ –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")


def end_session(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é."""
    user_id = update.effective_user.id
    logger.info(f"‚úÖ –†—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    if 'active_session' in context.user_data:
        logger.info(f"‚è± –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        save_session_data(user_id, context)
        context.user_data.clear()
        logger.info(f"üóë –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update.message.reply_text(
        "‚è≥ –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...",
        reply_markup=ReplyKeyboardRemove()
    )
    update.message.reply_text(
        "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.")



# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏
SESSION_TIMEOUT = 900  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def start_session(update: Update, context: CallbackContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    delete_bot_messages(update, context)
    user_id = update.effective_user.id
    session_start = datetime.now()
    context.user_data.update({
        'session_start': session_start,
        'correct_answers': 0,
        'active_session': True,
        'job': None
    })
    job = context.job_queue.run_once(
        callback=check_session_timeout,
        when=SESSION_TIMEOUT,
        context={
            'user_id': user_id,
            'session_start': session_start.timestamp()
        },
        name=str(user_id)
    )
    context.user_data['job'] = job
    update.effective_message.reply_text(
        "–°–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å!",
        reply_markup=ReplyKeyboardMarkup([[MENU_BUTTON]], resize_keyboard=True)
    )
    send_pronounce_button(update.effective_chat.id, context)

def update_session_timer(context: CallbackContext, user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Å—Å–∏–∏."""
    if 'job' in context.user_data:
        try:
            context.user_data['job'].schedule_removal()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

    new_job = context.job_queue.run_once(
        callback=check_session_timeout,
        when=SESSION_TIMEOUT,
        context={
            'user_id': user_id,
            'session_start': context.user_data['session_start'].timestamp()
        },
        name=str(user_id)
    )
    context.user_data['job'] = new_job


def delete_bot_messages(update: Update, context: CallbackContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ."""
    try:
        chat_id = update.effective_chat.id
        max_messages_to_check = 15  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
        for message_id in range(update.message.message_id, update.message.message_id - max_messages_to_check, -1):
            try:
                context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except telegram.error.BadRequest as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç: {e}")

