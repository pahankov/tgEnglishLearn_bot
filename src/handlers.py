import os
import random
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.quiz import QuizManager
from src.keyboards import main_menu_keyboard, answer_keyboard
from src.word_management import add_word, save_word, delete_word, confirm_delete, show_user_words, WAITING_WORD, WAITING_DELETE
from src.yandex_api import YandexDictionaryApi
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ QuizManager
db = Database()
quiz = QuizManager(db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –Ø–Ω–¥–µ–∫—Å–∞
YANDEX_API_KEY = os.getenv("YANDEX_DICTIONARY_API_KEY")  # –ö–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not YANDEX_API_KEY:
    raise ValueError("–ö–ª—é—á API –Ø–Ω–¥–µ–∫—Å.–°–ª–æ–≤–∞—Ä—è (YANDEX_DICTIONARY_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
yandex_api = YandexDictionaryApi(api_key=YANDEX_API_KEY)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start_handler(update: Update, context: CallbackContext):
    user = update.effective_user
    if not db.get_user(user.id):
        db.create_user(user.id, user.username, user.first_name)
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.",
        reply_markup=main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞
def ask_question_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
    question = quiz.get_next_question(user_id)
    if not question:
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="reset_progress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            reply_markup=reply_markup
        )
        return

    word_en, word_ru, word_type, word_id = question
    wrong_answers = quiz.get_wrong_answers(word_ru)
    options = [word_ru] + wrong_answers
    random.shuffle(options)
    reply_markup = answer_keyboard(options)

    context.user_data["current_question"] = {
        "word_en": word_en,
        "correct_answer": word_ru,
        "word_id": word_id,
        "word_type": word_type,
        "options": options,
        "reply_markup": reply_markup
    }
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{word_en}*",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


# –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def reset_progress_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    logger.info(f"–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    try:
        db.cur.execute("DELETE FROM user_progress WHERE user_id = %s", (user_id,))
        db.conn.commit()
        row_count = db.cur.rowcount
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {row_count}")
        update.callback_query.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        ask_question_handler(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        db.conn.rollback()
        update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_click_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    if "current_question" not in context.user_data:
        query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
        logger.warning("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞: current_question –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    data = query.data.split("_")
    if len(data) < 2:
        query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback: %s", query.data)
        return

    user_answer = data[1]
    correct_answer = context.user_data["current_question"]["correct_answer"]
    word_id = context.user_data["current_question"]["word_id"]
    word_type = context.user_data["current_question"]["word_type"]

    if user_answer == correct_answer:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        response_text = quiz.get_correct_response()
        query.answer(response_text)
        quiz.mark_word_seen(query.from_user.id, word_id, word_type)
        del context.user_data["current_question"]
        ask_question_handler(update, context)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –¥–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        response_text = quiz.get_incorrect_response()
        query.answer(response_text)
        options = context.user_data["current_question"]["options"]
        random.shuffle(options)
        reply_markup = answer_keyboard(options)
        try:
            query.edit_message_reply_markup(reply_markup=reply_markup)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: %s", e)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞
def save_word_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    russian_word = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    if not russian_word:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –ø—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ.")
        return WAITING_WORD

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ '{russian_word}'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API
    api_response = yandex_api.lookup(russian_word, "ru-en")

    if not api_response:
        update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{russian_word}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")
        logger.warning(f"API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{russian_word}'.")
        return WAITING_WORD

    try:
        definitions = api_response.get("def", [])
        if not definitions:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'def'.")

        translations = [item["text"] for item in definitions[0].get("tr", [])]
        if not translations:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'tr'.")

        # –ü—Ä–∏–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        first_translation = translations[0].lower()
        logger.info(f"–ü–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è '{russian_word}': '{first_translation}'.")
    except (IndexError, KeyError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è '{russian_word}': {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è '{russian_word}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return WAITING_WORD

    # –ü—Ä–∏–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    russian_word = russian_word.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if db.check_duplicate(first_translation, russian_word):
        update.message.reply_text(
            f"‚ùå –°–ª–æ–≤–æ '{russian_word}' —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{first_translation}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ."
        )
        logger.warning(
            f"–î—É–±–ª–∏–∫–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: —Å–ª–æ–≤–æ '{first_translation}' –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ '{russian_word}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}."
        )
        return WAITING_WORD

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ë—ã–ª–æ:
    # db.add_user_word(user_id, first_translation, russian_word)

    # –°—Ç–∞–ª–æ:
    success = db.add_user_word(user_id, first_translation, russian_word)
    if not success:
        update.message.reply_text("‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!")
        return ConversationHandler.END
    logger.info(f"–°–ª–æ–≤–æ '{first_translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{russian_word}'.")
    update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{russian_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º '{first_translation}'!")
    return ConversationHandler.END
