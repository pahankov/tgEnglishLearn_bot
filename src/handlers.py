import os
import random
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from dotenv import load_dotenv

from src import db
from src.quiz import QuizManager
from src.keyboards import main_menu_keyboard, answer_keyboard
from src.sberspeech_api import SberSpeechAPI
from src.yandex_api import YandexDictionaryApi
from src.session_manager import (
    update_session_timer,
    start_session,
    delete_bot_messages,
    send_message_with_tracking,
    save_session_data,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logger = logging.getLogger(__name__)
quiz = QuizManager(db)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –Ø–Ω–¥–µ–∫—Å.–°–ª–æ–≤–∞—Ä—è
YANDEX_API_KEY = os.getenv("YANDEX_DICTIONARY_API_KEY")
if not YANDEX_API_KEY:
    raise ValueError("Yandex Dictionary API key not found.")
yandex_api = YandexDictionaryApi(api_key=YANDEX_API_KEY)


def start_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_bot_messages(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ—Ç
    if not db.get_user(user.id):
        db.create_user(user.id, user.username, user.first_name)
        logger.info(f"User created: {user.first_name} (ID: {user.id})")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_message_with_tracking(
        update,
        context,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.",
        reply_markup=main_menu_keyboard(),
    )


def ask_question_handler(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π."""
    message = update.message or (update.callback_query and update.callback_query.message)
    if not message:
        logger.error("Could not determine the source of the update.")
        return

    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞
    if "active_session" not in context.user_data or not context.user_data["active_session"]:
        start_session(update, context)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å–µ—Å—Å–∏–∏
    update_session_timer(context, user_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question = quiz.get_next_question(user_id)
    if not question:
        if context.user_data.get("active_session"):
            save_session_data(user_id, context)
            context.user_data.clear()
            keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="reset_progress")]]
            send_message_with_tracking(
                update,
                context,
                text="üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
        return

    try:
        word_en, word_ru, word_type, word_id = question
    except Exception as e:
        logger.error(f"Error unpacking question data: {e}")
        return

    wrong_answers = list(
        {ans.lower() for ans in quiz.get_wrong_answers(word_ru) if ans.lower() != word_ru.lower()}
    )[:3]
    options = [word_ru.capitalize()] + [ans.capitalize() for ans in wrong_answers]
    random.shuffle(options)

    context.user_data["current_question"] = {
        "word_en": word_en,
        "correct_answer": word_ru.capitalize(),
        "word_id": word_id,
        "word_type": word_type,
        "options": options,
    }

    send_message_with_tracking(
        update,
        context,
        text=f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{word_en.capitalize()}*",
        parse_mode="Markdown",
        reply_markup=answer_keyboard(options),
    )


def button_click_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    if "current_question" not in context.user_data:
        query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
        return

    data = query.data.split("_")
    if len(data) < 2:
        query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return

    user_answer = data[1]
    current_question = context.user_data["current_question"]
    correct_answer = current_question["correct_answer"]
    word_id = current_question["word_id"]
    word_type = current_question["word_type"]
    user_id = update.effective_user.id

    if user_answer.lower() == correct_answer.lower():
        if not db.check_word_progress(user_id, word_id, word_type):
            session_start = context.user_data.get("session_start")
            quiz.mark_word_seen(user_id, word_id, word_type, session_start)
        del context.user_data["current_question"]
        query.answer(quiz.get_correct_response())

        try:
            context.bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        except Exception as e:
            logger.error(f"Error deleting message: {e}")

        ask_question_handler(update, context)
    else:
        options = current_question["options"]
        random.shuffle(options)
        try:
            query.edit_message_reply_markup(reply_markup=answer_keyboard(options))
        except Exception as e:
            logger.warning(f"Error updating keyboard: {e}")
        query.answer(quiz.get_incorrect_response())


def pronounce_word_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞."""
    query = update.callback_query
    query.answer()

    current_question = context.user_data.get("current_question")
    if not current_question or "word_en" not in current_question:
        query.answer("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.", show_alert=True)
        return

    word = current_question["word_en"]
    try:
        sber_speech = SberSpeechAPI()
        audio_file = sber_speech.synthesize_text(word)

        if audio_file:
            with open(audio_file, "rb") as audio:
                message = context.bot.send_audio(chat_id=query.message.chat.id, audio=audio)
                if "bot_messages" not in context.user_data:
                    context.user_data["bot_messages"] = []
                context.user_data["bot_messages"].append(message.message_id)
            logger.info(f"Word '{word}' pronounced successfully.")
        else:
            logger.error("Audio synthesis failed.")
            query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞.", show_alert=True)

    except FileNotFoundError as e:
        logger.error(f"Audio file not found: {e}")
        query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è.", show_alert=True)
    except Exception as e:
        logger.error(f"Error in pronounce_word_handler: {e}")
        query.answer("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)


def handle_menu_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–í –º–µ–Ω—é ‚Ü©Ô∏è'."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    if "user_messages" not in context.user_data:
        context.user_data["user_messages"] = []
    if update.message:
        context.user_data["user_messages"].append(update.message.message_id)
        logger.info(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: %s) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
            update.message.message_id,
        )
    else:
        logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if "active_session" in context.user_data:
        save_session_data(user_id, context)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s.", user_id)
    else:
        logger.info("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s.", user_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_bot_messages(update, context)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    logger.info("üóë –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã –¥–ª—è %s.", user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    send_message_with_tracking(
        update,
        context,
        text="üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard(),
    )
    logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", user_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    return ConversationHandler.END

