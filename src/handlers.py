# handlers.py
import random
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from src.database import Database
from src.quiz import QuizManager
from src.keyboards import main_menu_keyboard, answer_keyboard
from src.word_management import add_word, save_word, delete_word, confirm_delete, show_user_words, WAITING_WORD, WAITING_DELETE

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∏ QuizManager
db = Database()
quiz = QuizManager(db)

def start_handler(update: Update, context: CallbackContext):
    user = update.effective_user
    if not db.get_user(user.id):
        db.create_user(user.id, user.username, user.first_name)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.",
        reply_markup=main_menu_keyboard()
    )

def ask_question_handler(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    question = quiz.get_next_question(user_id)
    if not question:
        # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="reset_progress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            reply_markup=reply_markup
        )
        return

    word_en, word_ru, word_type, word_id = question
    wrong_answers = quiz.get_wrong_answers(word_ru)
    options = [word_ru] + wrong_answers
    random.shuffle(options)
    reply_markup = answer_keyboard(options)
    context.user_data["current_question"] = {
        "word_en": word_en,
        "correct_answer": word_ru,
        "word_id": word_id,
        "word_type": word_type,
        "options": options,
        "reply_markup": reply_markup
    }
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{word_en}*",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

def reset_progress_handler(update: Update, context: CallbackContext):
    """–û—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."""
    user_id = update.effective_user.id
    logger.info(f"reset_progress –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id: {user_id}")
    try:
        db.cur.execute("DELETE FROM user_progress WHERE user_id = %s", (user_id,))
        db.conn.commit()
        row_count = db.cur.rowcount
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}: —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {row_count}")
        update.callback_query.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        ask_question_handler(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è user_id {user_id}: {e}")
        db.conn.rollback()
        update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def button_click_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    if "current_question" not in context.user_data:
        query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
        return

    data = query.data.split("_")
    if len(data) < 2:
        query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return
    user_answer = data[1]
    correct_answer = context.user_data["current_question"]["correct_answer"]
    word_id = context.user_data["current_question"]["word_id"]
    word_type = context.user_data["current_question"]["word_type"]

    if user_answer == correct_answer:
        response_text = quiz.get_correct_response()
        query.answer(response_text)
        quiz.mark_word_seen(query.from_user.id, word_id, word_type)
        del context.user_data["current_question"]
        ask_question_handler(update, context)
    else:
        response_text = quiz.get_incorrect_response()
        query.answer(response_text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
        options = context.user_data["current_question"]["options"]
        random.shuffle(options)
        reply_markup = answer_keyboard(options)
        try:
            query.edit_message_reply_markup(reply_markup=reply_markup)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", exc_info=e)

def cancel_handler(update: Update, context: CallbackContext):
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END
