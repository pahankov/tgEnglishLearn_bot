from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.error import BadRequest
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters,
    ConversationHandler,
)
from src.database import Database
from src.config import TOKEN
import logging
import random
from src.word_management import (
    add_word,
    save_word,
    delete_word,
    confirm_delete,
    show_user_words,
    WAITING_WORD,
    WAITING_DELETE,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ"), KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ"), KeyboardButton("–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ")],
    ],
    resize_keyboard=True,
)


def start(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user = update.effective_user
    if not db.get_user(user.id):
        db.create_user(user.id, user.username, user.first_name)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. üéì",
        reply_markup=MAIN_MENU_KEYBOARD,
    )


def ask_question(update: Update, context: CallbackContext):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–¥–∞—ë—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ".
    """
    user_id = update.effective_user.id
    word_info = db.get_unseen_word(user_id)

    if not word_info:
        # –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="reset_progress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üéâ –í—ã –º–æ–ª–æ–¥–µ—Ü! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            reply_markup=reply_markup,
        )
        return

    word_en, word_ru, word_type, word_id = word_info
    wrong_answers = db.get_wrong_translations(word_ru, 3)
    options = [word_ru] + wrong_answers
    random.shuffle(options)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton(options[i], callback_data=f"answer_{options[i]}"),
            InlineKeyboardButton(options[i + 1], callback_data=f"answer_{options[i + 1]}"),
        ]
        for i in range(0, len(options), 2)
    ]

    context.user_data["current_question"] = {
        "word_en": word_en,
        "correct_answer": word_ru,
        "word_id": word_id,
        "word_type": word_type,
        "options": options,
        "reply_markup": InlineKeyboardMarkup(keyboard),
    }

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{word_en}*",
        parse_mode="Markdown",
        reply_markup=context.user_data["current_question"]["reply_markup"],
    )


def reset_progress(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ".
    –û—á–∏—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ user_progress –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.
    """
    user_id = update.effective_user.id
    logger.info(f"reset_progress –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id: {user_id}")
    try:
        db.cur.execute("DELETE FROM user_progress WHERE user_id = %s", (user_id,))
        db.conn.commit()
        row_count = db.cur.rowcount
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {user_id}: —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {row_count}")
        update.callback_query.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        ask_question(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è user_id {user_id}: {e}")
        db.conn.rollback()
        update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def button_click(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—ã–¥–∞—ë—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ query.answer() (–ø–æ –∫—Ä—É–≥—É) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.
    –ü—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º ‚Äì –≤—ã–¥–∞—ë—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É) –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.
    """
    query = update.callback_query

    if "current_question" not in context.user_data:
        query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_answer = query.data.split("_")[1]
    correct_answer = context.user_data["current_question"]["correct_answer"]
    word_id = context.user_data["current_question"]["word_id"]
    word_type = context.user_data["current_question"]["word_type"]

    if user_answer == correct_answer:
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
        correct_responses = [
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ",
            "üåü –í–µ—Ä–Ω–æ, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üëç",
            "üî• –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            "üòé –ú–æ–ª–æ–¥–µ—Ü! –û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!",
            "üéä –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –≤–µ—Ä–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–æ!",
        ]
        if "correct_index" not in context.user_data:
            context.user_data["correct_index"] = 0
        index = context.user_data["correct_index"]
        response_text = correct_responses[index]
        context.user_data["correct_index"] = (index + 1) % len(correct_responses)

        query.answer(response_text)
        db.mark_word_as_seen(query.from_user.id, word_id, word_type)
        del context.user_data["current_question"]
        ask_question(update, context)
    else:
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ)
        incorrect_responses = [
            "‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
            "üòï –ù–µ–≤–µ—Ä–Ω–æ. –î–∞–π –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É!",
            "üö´ –û—à–∏–±–∫–∞. –ü–æ–ø—ã—Ç–∞–π—Å—è —Å–Ω–æ–≤–∞!",
            "üôÅ –ù–µ —É–≥–∞–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
            "üò¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–∞–≤–∞–π, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!",
        ]
        if "incorrect_index" not in context.user_data:
            context.user_data["incorrect_index"] = 0
        idx_incorrect = context.user_data["incorrect_index"]
        incorrect_text = incorrect_responses[idx_incorrect]
        context.user_data["incorrect_index"] = (idx_incorrect + 1) % len(incorrect_responses)

        query.answer(incorrect_text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        current_question = context.user_data["current_question"]
        options = current_question["options"]
        random.shuffle(options)
        keyboard = []
        for i in range(0, len(options), 2):
            row = []
            for opt in options[i : i + 2]:
                callback_data = f"answer_{opt}_{random.randint(1, 1000)}"
                row.append(InlineKeyboardButton(opt, callback_data=callback_data))
            keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            query.edit_message_reply_markup(reply_markup=reply_markup)
        except BadRequest:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç).")


def cancel(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π.
    """
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_KEYBOARD)
    return ConversationHandler.END


def error_handler(update: Update, context: CallbackContext):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    """
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if update.effective_message:
        update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø—Ä–∏ callback_data = "reset_progress")
    dispatcher.add_handler(CallbackQueryHandler(reset_progress, pattern="^reset_progress$"))
    # –ó–∞—Ç–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(button_click))

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ$"), ask_question))
    dispatcher.add_handler(MessageHandler(Filters.regex(r"^–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ$"), show_user_words))

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex(r"^–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï$"), add_word),
            MessageHandler(Filters.regex(r"^–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ$"), delete_word),
        ],
        states={
            WAITING_WORD: [MessageHandler(Filters.text & ~Filters.command, save_word)],
            WAITING_DELETE: [MessageHandler(Filters.text & ~Filters.command, confirm_delete)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    dispatcher.add_handler(conv_handler)
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
